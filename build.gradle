plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
    id 'scala'
	id "me.modmuss50.mod-publish-plugin" version "0.4.4"
	id 'me.fallenbreath.yamlang' version '1.3.1'
}

version = project.mod_version
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.

	maven {
		name = "Modrinth"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}

	maven {
		url "https://maven.enjarai.dev/releases"
	}
	maven {
		url "https://maven.enjarai.dev/mirrors"
	}

	maven {
		name "Terraformers Maven"
		url 'https://maven.terraformersmc.com'
	}

    maven {
        name "kotori316"
        url 'https://maven.kotori316.com/'
    }
}

sourceSets {
    main {
        scala {
            setSrcDirs(["src/main/scala", "src/main/java"])

        }
        java {
            setSrcDirs([])
        }
    }

    //TODO: this doesn't work
    //client {
    //    scala {
    //        setSrcDirs(["src/client/scala", "src/client/java"])
    //    }
    //    java {
    //        setSrcDirs([])
    //    }
    //}
}

loom {
	splitEnvironmentSourceSets()

	mods {
		"ram" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${property('deps.minecraft')}"
	mappings "net.fabricmc:yarn:${property('deps.yarn')}:v2"
	modImplementation "net.fabricmc:fabric-loader:${property('deps.floader')}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${property('deps.fabric-api')}"
    modImplementation "com.kotori316:scalable-cats-force-fabric:${property('deps.scala')}"

	modImplementation "stellarwitch7:libstellar:${property('deps.libstellar')}"
	modImplementation "dev.enjarai:trickster:${property('deps.trickster')}"

	modImplementation "com.terraformersmc:modmenu:${property('deps.modmenu')}"
}

processResources {
	inputs.property("version", project.version)

	filesMatching("fabric.mod.json") {
		expand("version": project.version)
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

yamlang {
	targetSourceSets = [sourceSets.main]
	inputDir = "assets/ram/lang"
}

// configure the maven publication
publishing {
	repositories {
		maven {
			name = "enjaraiMaven"
			url = "https://maven.enjarai.dev/releases"
			credentials(PasswordCredentials)
			authentication {
				basic(BasicAuthentication)
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			groupId = group
			artifactId = archivesBaseName
			version = version

			from components.java
		}
	}
}

publishMods {
	file = remapJar.archiveFile
	displayName = "Random Access Mind ${property('mod_version')} for Trickster ${property('deps.trickster')}"
	version = project.version
	changelog = getRootProject().file("CHANGELOG.md").text
	type = STABLE
	modLoaders.add("fabric")

	def min = property('publish_target_min')
	def max = property('publish_target_max')

	if (providers.gradleProperty('modrinthToken').present) {
		modrinth {
			projectId = property('mod_modrinth')
			accessToken = providers.gradleProperty('modrinthToken').get()

			if (min == max) {
				minecraftVersions.add(min)
			} else {
				minecraftVersionRange {
					start = min
					end = max
				}
			}

			requires {
				slug = "libstellar"
			}
			requires {
				slug = "trickster"
			}
		}
	}

	if (providers.gradleProperty('githubToken').present) {
		github {
			repository = property('mod_github')
			accessToken = providers.gradleProperty('githubToken').get()

			commitish = property('git_branch')
			tagName = project.version
		}
	}
}

tasks.register('publishAll') {
	group 'publishing'
	dependsOn 'publish'
	dependsOn 'publishMods'
}
